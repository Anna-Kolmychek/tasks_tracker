import pytest


@pytest.fixture
def task_data1():
    return {
        "description": "string",
        "status": "new",
        "parent_task_id": 0,
        "maker_id": 0,
        "maker_position_id": 0,
        "deadline": "2024-02-16",
        "title": "string"
    }

@pytest.fixture
def task_data2():
    return {
        "title": "string"
    }

@pytest.fixture
def position_data():
    return {'title': 'developer'}

@pytest.fixture
def user_data():
    return {
        "email": "petrov@email.com",
        "password": "qwerty"
    }


def test_create_task():
    # Case 1: Создание задачи с полными данными, проверка кода ответа
    # Case 2: Создание задачи с полными данными, проверка совпадения тела ответа и данных в БД
    # Case 3: Создание задачи с полными данными, проверка тела ответа

    # Case 4: Создание задачи с неполными данными, проверка кода ответа
    # Case 5: Создание задачи с неполными данными, проверка совпадения тела ответа и данных в БД
    # Case 6: Создание задачи с неполными данными, проверка тела ответа

    # Case 7: Создание задачи с несуществующим status, проверка кода ответа
    # Case 8: Создание задачи с несуществующим parent_task_id, проверка кода ответа
    # Case 9: Создание задачи с несуществующим maker_id, проверка кода ответа
    # Case 10: Создание задачи с несуществующим maker_position_id, проверка кода ответа
    pass


def test_get_all_tasks():
    # Case 1: Запрос всех задач, проверка кода ответа
    # Case 2: Запрос всех задач, проверка совпадения тела ответа и данных в БД
    # Case 3: Запрос всех задач, проверка limit и offset
    pass


def test_get_task_by_id():
    # Case 1: Запрос несуществующей задачи, проверка кода ответа
    # Case 2: Запрос существующей задачи, проверка кода ответа
    # Case 3: Запрос существующей задачи, проверка совпадения тела ответа и данных в БД
    pass


def test_update_task_by_id():
    # Case 1: Обновление несуществующей задачи, проверка кода ответа

    # Case 2: Обновление существующей задачи, проверка кода ответа
    # Case 3: Обновление существующей задачи полными данными, проверка совпадения тела ответа и данных в БД
    # Case 4: Обновление существующей задачи полными данными, проверка тела ответа

    # Case 5: Обновление существующей задачи неполными данными, проверка совпадения тела ответа и данных в БД
    # Case 6: Обновление существующей задачи неполными данными, проверка данных тела ответа

    # Case 7: Обновление существующей задачи несуществующим status, проверка кода ответа
    # Case 8: Обновление существующей задачи несуществующим parent_task_id, проверка кода ответа
    # Case 9: Обновление существующей задачи несуществующим maker_id, проверка кода ответа
    # Case 10: Обновление существующей задачи несуществующим maker_position_id, проверка кода ответа
    pass


def test_partial_update_task_by_id():
    # Case 1: Обновление несуществующей задачи, проверка кода ответа
    # Case 2: Обновление существующей задачи, проверка кода ответа
    # Case 3: Обновление существующей задачи неполными данными, проверка совпадения тела ответа и данных в БД
    # Case 4: Обновление существующей задачи неполными данными, проверка тела ответа
    pass


def test_delete_task_by_id():
    # Case 1: Удаление несуществующей задачи, проверка кода ответа
    # Case 2: Удаление существующей задачи, проверка кода ответа
    # Case 3: Удаление существующей задачи, проверка тела ответа
    # Case 4: Удаление существующей задачи, проверка отсутствия данных в ДБ
    pass

