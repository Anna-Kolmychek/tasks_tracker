import pytest


@pytest.fixture
def user_data1():
    return {
        "email": "ivanov@email.com",
        "password": "qwerty",
        "firstname": "ivan",
        "lastname": "ivanov",
        "position": "string"
    }

def user_data2():
    return {
        "email": "petrov@email.com",
        "password": "qwerty"
    }

@pytest.fixture
def position_data():
    return {'title': 'developer'}


def test_create_user():
    # Case 1: Создание пользователя с полными данными, проверка кода ответа
    # Case 2: Создание пользователя с полными данными, проверка совпадения тела ответа и данных в БД
    # Case 3: Создание пользователя с полными данными, проверка тела ответа

    # Case 4: Создание пользователя с неполными данными, проверка кода ответа
    # Case 5: Создание пользователя с неполными данными, проверка совпадения тела ответа и данных в БД
    # Case 6: Создание пользователя с неполными данными, проверка тела ответа

    # Case 7: Создание пользователя с несуществующей position, проверка совпадения тела ответа и данных в БД
    # Case 8: Создание пользователя с несуществующей position, проверка тела ответа

    # Case 9: Создание пользователя без email, проверка кода ответа
    # Case 10: Создание пользователя без пароля, проверка кода ответа
    # Case 11: Создание пользователя с дублем email, проверка кода ответа
    pass


def test_get_all_users():
    # Case 1: Запрос всех пользователей, проверка кода ответа
    # Case 2: Запрос всех пользователей, проверка совпадения тела ответа и данных в БД
    # Case 3: Запрос всех пользователей, проверка limit и offset
    pass


def test_get_user_by_id():
    # Case 1: Запрос несуществующего пользователя, проверка кода ответа
    # Case 2: Запрос существующего пользователя, проверка кода ответа
    # Case 3: Запрос существующего пользователя, проверка совпадения тела ответа и данных в БД
    pass


def test_update_user_by_id():
    # Case 1: Обновление несуществующего пользователя, проверка кода ответа
    # Case 2: Обновление существующего пользователя, проверка кода ответа
    # Case 3: Обновление существующего пользователя полными данными, проверка совпадения тела ответа и данных в БД
    # Case 4: Обновление существующего пользователя полными данными, проверка тела ответа
    # Case 5: Обновление существующего пользователя неполными данными, проверка совпадения тела ответа и данных в БД
    # Case 6: Обновление существующего пользователя неполными данными, проверка данных тела ответа
    # Case 7: Обновление существующего пользователя несуществующей position, проверка тела ответа
    # Case 8: Обновление существующего пользователя дубликатом email, проверка кода ответа
    pass


def test_partial_update_user_by_id():
    # Case 1: Обновление несуществующего пользователя, проверка кода ответа
    # Case 2: Обновление существующего пользователя, проверка кода ответа
    # Case 3: Обновление существующего пользователя неполными данными
    # с несуществующей position, проверка совпадения тела ответа и данных в БД
    # Case 4: Обновление существующего пользователя неполными данными
    # с несуществующей position, проверка тела ответа
    pass


def test_delete_user_by_id():
    # Case 1: Удаление несуществующего пользователя, проверка кода ответа
    # Case 2: Удаление существующего пользователя, проверка кода ответа
    # Case 3: Удаление существующего пользователя, проверка тела ответа
    # Case 4: Удаление существующего пользователя, проверка отсутствия данных в ДБ
    pass

